generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

//-----------------------  --- DOCUMENTATION --- ---------------------------
//https://www.prisma.io/docs/concepts/components/prisma-schema/relations
//https://www.prisma.io/docs/concepts/components/prisma-schema/data-model

//----------------------------- ENUMS USED ---------------------------------

enum UserRoles {
    VET
    CLIENT
}

enum InquirieType {
    VACCINE
    DEWORMING
    GENERAL
}

enum TimeZone {
    MORNING
    AFTERNOON
    EVENING
}

//-----------------------------   USER     ---------------------------------
model User {
    id        String   @id @default(cuid()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email             String             @unique
    dni               String             @unique
    name              String
    lastname          String
    role              UserRoles
    password          String
    passwordVerified  DateTime?
    telephoneNumber   String?
    hasDiscount       Boolean            @default(false)
    discountAmount    Int?               @default(0)
    dogs              Pet[]
    bookings          Booking[]
    adoptPublications AdoptPublication[]
}

// ------------------------------    RESERVATIONS       ----------------------------
model Booking {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    date     DateTime
    type     InquirieType
    timeZone TimeZone
    user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String       @db.ObjectId
    dog      Pet          @relation(fields: [dogId], references: [id], onDelete: Cascade)
    dogId    String       @db.ObjectId
}

// -------------------------------            ---------------------------------
model Pet {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name         String
    birth        DateTime
    gender       String
    img          String?
    color        String
    height       Float
    weight       Float
    race         String
    letsCross    Boolean    @default(false)
    booking      Booking[]
    healthBook   HealthBook @relation(fields: [healthBookId], references: [id], onDelete: Cascade)
    healthBookId String     @unique @db.ObjectId
    owner        User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId      String     @db.ObjectId
}

//------------------------------- HEALTH BOOK ---------------------------------
model HealthBook {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    vaccines     Vaccine[]
    inquiries    Inquirie[]
    dewormings   Deworming[]
    observations String?
    dog          Pet?
}

// ------------------------------            ---------------------------------
model Inquirie {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    date         String
    observations String?
    height       Float?
    weight       Float?
    healthBook    HealthBook? @relation(fields: [healthBookId], references: [id], onDelete: Cascade)
    healthBookId String      @unique @db.ObjectId
}

// ------------------------------            ---------------------------------
model Deworming {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    date         DateTime
    product      String
    dosis        String
    healthBook    HealthBook? @relation(fields: [healthBookId], references: [id], onDelete: Cascade)
    healthBookId String      @unique @db.ObjectId
}

// ------------------------------            ---------------------------------
model Vaccine {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    lot          String
    date         DateTime
    lab          String
    healthBook    HealthBook? @relation(fields: [healthBookId], references: [id], onDelete: Cascade)
    healthBookId String      @unique @db.ObjectId
}

// ------------------------------     ADOPTION       ---------------------------------
model AdoptPublication {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    info   String?
    active Boolean @default(true)
    reason String
    dog    Dog?
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String  @unique @db.ObjectId
}

model Dog {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name          String?
    age           DateTime
    gender        String?
    color         String?
    height        Float?
    weight        Float?
    race          String?
    publication   AdoptPublication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
    publicationId String           @unique @db.ObjectId
}

// //-------------TODO--------------

// model Services{}
// model LostPublication{}
// model DonationCampaign{}
