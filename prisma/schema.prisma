generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

//-----------------------  --- DOCUMENTATION --- ---------------------------
//https://www.prisma.io/docs/concepts/components/prisma-schema/relations
//https://www.prisma.io/docs/concepts/components/prisma-schema/data-model

//----------------------------- ENUMS USED ---------------------------------

enum UserRoles {
    VET
    CLIENT
}

enum BookingType {
    VACCINE
    DEWORMING
    GENERAL
    CASTRATION
    URGENCY
}

enum TimeZone {
    MORNING
    AFTERNOON
    EVENING
}

enum BookingStatus {
    PENDING
    APPROVED
    COMPLETED
    CANCELLED
}

//-----------------------------   USER     ---------------------------------
model User {
    id                String             @id @default(auto()) @map("_id") @db.ObjectId
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    birth             DateTime?
    email             String             @unique
    dni               String             @unique
    name              String
    lastname          String
    role              UserRoles
    password          String
    passwordVerified  DateTime?
    telephoneNumber   String?
    hasDiscount       Boolean            @default(false)
    discountAmount    Int?               @default(0)
    dogs              Pet[]
    bookings          Booking[]
    adoptPublications AdoptPublication[]
    lostPublications  LostPublication[]
    donations         Donation[]
}

// ------------------------------    RESERVATIONS       ----------------------------
model Booking {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    status      BookingStatus @default(PENDING)
    date        DateTime
    type        BookingType
    vaccineType VaccineType?
    timeZone    TimeZone
    user        User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String?        @db.ObjectId
    dog         Pet?           @relation(fields: [dogId], references: [id], onDelete: Cascade)
    dogId       String?        @db.ObjectId

    weight     Float?
    payAmount  Float?           @default(0)
    inquirie   Inquirie?
    deworming  Deworming?
    vaccine    Vaccine?
    castration Castration?
}

// -------------------------------            ---------------------------------
model Pet {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    name         String
    birth        DateTime
    gender       String
    img          String?
    color        String
    height       Float
    weight       Float
    race         String
    castrated    Boolean
    letsCross    Boolean  @default(false)
    observations String
    disabled     Boolean?  @default(false)
    
    bookings      Booking[]
    owner        User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId      String     @db.ObjectId

    @@unique([ownerId, name])
}

// ------------------------------            ---------------------------------
model Inquirie {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    observations String?
    height       Float?

    booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    bookingId String  @unique @db.ObjectId
}

// ------------------------------            ---------------------------------
model Deworming {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    product String
    dosis   Float

    booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    bookingId String  @unique @db.ObjectId
}

// ------------------------------            ---------------------------------
enum VaccineType {
    A
    B
}

model Vaccine {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    dosis Float

    booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    bookingId String  @unique @db.ObjectId
}

// ------------------------------            ---------------------------------
model Castration {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    succesful Boolean 
    
    booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    bookingId String  @unique @db.ObjectId
}

// ------------------------------     ADOPTION       ---------------------------------
model AdoptPublication {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    email     String
    info      String?
    active    Boolean  @default(true)
    reason    String
    dog       Dog      @relation(fields: [dogId], references: [id], onDelete: Cascade)
    dogId     String   @unique @db.ObjectId
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @db.ObjectId
}

model Dog {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name      String?
    birth     DateTime?
    gender    String?
    color     String?
    height    Float?
    weight    Float?
    race      String?
    castrated Boolean?
    adoption  AdoptPublication?
}

// ------------------------------     SERVICES       ---------------------------------

enum ServiceTypes {
    DOGWATCHER
    DOGWALKER
}

model Service {
    id           String       @id @default(auto()) @map("_id") @db.ObjectId
    createdAt    DateTime     @default(now())
    availability Boolean      @default(true)
    zone         String
    hour         String
    type         ServiceTypes
    name         String
    email        String   
    photo        String?
    @@unique([type, email])
}

// ------------------------------     LOST PUBLICATIONS       ---------------------------------
model LostPublication {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    email     String
    lastSeen  DateTime
    message   String
    photo     String?

    active Boolean @default(true)
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String  @unique @db.ObjectId
}

// ------------------------------     DONATION CAMPAIGN       ---------------------------------
enum DonationCampaignStatus {
    ACTIVE
    FINISHED
}

model DonationCampaign {
    id            String                 @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime               @default(now())
    updatedAt     DateTime               @updatedAt
    status        DonationCampaignStatus @default(ACTIVE)
    title         String
    reason        String
    amountGoal    Float
    endDate       DateTime
    currentAmount Float                    @default(0)
    img           String?
    donations     Donation[]
}

model Donation {
    id         String           @id @default(auto()) @map("_id") @db.ObjectId
    paymentId  String           @unique
    createdAt  DateTime         @default(now())
    updatedAt  DateTime         @updatedAt
    amount     Int
    user       User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String?          @db.ObjectId
    campaign   DonationCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
    campaignId String           @db.ObjectId
}
